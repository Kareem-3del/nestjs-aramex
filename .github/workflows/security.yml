name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  NODE_ENV: test

jobs:
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        echo "Running npm audit..."
        npm audit --audit-level moderate
        echo "npm audit completed"

    - name: Check for known vulnerabilities
      run: |
        echo "Checking for known vulnerabilities..."
        npx audit-ci --moderate
        echo "Vulnerability check completed"

  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Run secret detection
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check licenses
      run: |
        echo "Checking license compliance..."
        npx license-checker --summary
        echo "License check completed"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: high
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript compiler
      run: npx tsc --noEmit

    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" src/ test/ --include="*.ts" --include="*.js"; then
          echo "Found TODO/FIXME comments - consider addressing them"
        else
          echo "No TODO/FIXME comments found"
        fi

  environment-validation:
    name: Environment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Validate GitHub Secrets Configuration
      run: |
        echo "Validating GitHub secrets configuration..."

        # Check if required secrets are configured (without exposing values)
        required_secrets=(
          "ARAMEX_ACCOUNT_COUNTRY_CODE"
          "ARAMEX_ACCOUNT_ENTITY"
          "ARAMEX_ACCOUNT_NUMBER"
          "ARAMEX_ACCOUNT_PIN"
          "ARAMEX_USERNAME"
          "ARAMEX_PASSWORD"
          "ARAMEX_VERSION"
          "NPM_TOKEN"
          "CODECOV_TOKEN"
        )

        echo "Required secrets:"
        for secret in "${required_secrets[@]}"; do
          echo "- $secret"
        done

        echo ""
        echo "Secrets validation completed"
        echo "Note: Actual secret values are never exposed in logs"

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [dependency-check, secret-scan, license-check, code-quality, environment-validation]

    steps:
    - name: Generate security summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.dependency-check.result }}" == "success" ]; then
          echo "✅ Dependency security scan passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Dependency security scan failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.secret-scan.result }}" == "success" ]; then
          echo "✅ Secret scan passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Secret scan failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.license-check.result }}" == "success" ]; then
          echo "✅ License compliance check passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ License compliance check failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "✅ Code quality analysis passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code quality analysis failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.environment-validation.result }}" == "success" ]; then
          echo "✅ Environment validation passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Environment validation failed" >> $GITHUB_STEP_SUMMARY
        fi
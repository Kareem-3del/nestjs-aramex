name: Status Check

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Check status daily at 8 AM UTC
    - cron: '0 8 * * *'
  workflow_dispatch:

env:
  NODE_ENV: test

jobs:
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm test

    - name: Build package
      run: npm run build

    - name: Validate build artifacts
      run: |
        echo "Validating build artifacts..."
        ls -la dist/
        test -f dist/index.js
        test -f dist/index.d.ts
        echo "Build artifacts validated successfully"

  api-connectivity:
    name: Aramex API Connectivity
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build package
      run: npm run build

    - name: Test Aramex API connectivity
      run: |
        echo "Testing Aramex API connectivity..."
        timeout 30s node -e "
          const { testAramexAPI } = require('./test-aramex.ts');
          testAramexAPI().then(() => {
            console.log('API connectivity test passed');
            process.exit(0);
          }).catch((error) => {
            console.error('API connectivity test failed:', error.message);
            process.exit(1);
          });
        " || echo "API connectivity test timed out or failed"
      env:
        ARAMEX_ACCOUNT_COUNTRY_CODE: ${{ secrets.ARAMEX_ACCOUNT_COUNTRY_CODE }}
        ARAMEX_ACCOUNT_ENTITY: ${{ secrets.ARAMEX_ACCOUNT_ENTITY }}
        ARAMEX_ACCOUNT_NUMBER: ${{ secrets.ARAMEX_ACCOUNT_NUMBER }}
        ARAMEX_ACCOUNT_PIN: ${{ secrets.ARAMEX_ACCOUNT_PIN }}
        ARAMEX_USERNAME: ${{ secrets.ARAMEX_USERNAME }}
        ARAMEX_PASSWORD: ${{ secrets.ARAMEX_PASSWORD }}
        ARAMEX_VERSION: ${{ secrets.ARAMEX_VERSION }}
        ARAMEX_SANDBOX: 'true'

  validate-project:
    name: Project Structure Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Validate project structure
      run: |
        # Check required files exist
        required_files=("package.json" "package-lock.json" "tsconfig.json" "jest.config.js")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Error: Required file $file is missing!"
            exit 1
          fi
        done

        # Check required directories exist
        required_dirs=("src" "test")
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "Error: Required directory $dir is missing!"
            exit 1
          fi
        done

    - name: Validate package.json
      run: |
        node -e "
          const pkg = require('./package.json');

          // Check required fields
          const required = ['name', 'version', 'description', 'main', 'types'];
          for (const field of required) {
            if (!pkg[field]) {
              console.error(\`Error: package.json missing required field: \${field}\`);
              process.exit(1);
            }
          }

          // Validate scoped package name
          if (!pkg.name.startsWith('@')) {
            console.error('Error: Package should be scoped (start with @)');
            process.exit(1);
          }

          // Validate scripts
          const requiredScripts = ['build', 'test'];
          for (const script of requiredScripts) {
            if (!pkg.scripts || !pkg.scripts[script]) {
              console.error(\`Error: package.json missing required script: \${script}\`);
              process.exit(1);
            }
          }

          console.log('package.json validation passed');
        "

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for outdated dependencies
      run: |
        echo "Checking for outdated dependencies..."
        npm outdated || true
        echo "Dependency check completed"

    - name: Check for security vulnerabilities
      run: |
        echo "Checking for security vulnerabilities..."
        npm audit --audit-level moderate || true
        echo "Security check completed"

  environment-validation:
    name: Environment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Validate CI environment
      run: |
        echo "Validating CI environment..."
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Git version: $(git --version)"
        echo "Operating system: $(uname -a)"
        echo "Available memory: $(free -h | head -n 2)"
        echo "Disk space: $(df -h /)"
        echo "Environment validation completed"

  status-summary:
    name: Status Summary
    runs-on: ubuntu-latest
    needs: [health-check, api-connectivity, validate-project, dependency-check, environment-validation]
    if: always()

    steps:
    - name: Generate status summary
      run: |
        echo "## System Status Check" >> $GITHUB_STEP_SUMMARY
        echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.health-check.result }}" == "success" ]; then
          echo "System health check passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "System health check failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.api-connectivity.result }}" == "success" ]; then
          echo "Aramex API connectivity verified" >> $GITHUB_STEP_SUMMARY
        else
          echo "Aramex API connectivity failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.validate-project.result }}" == "success" ]; then
          echo "Project structure validation passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "Project structure validation failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.dependency-check.result }}" == "success" ]; then
          echo "Dependency analysis passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "Dependency analysis failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.environment-validation.result }}" == "success" ]; then
          echo "Environment validation passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "Environment validation failed" >> $GITHUB_STEP_SUMMARY
        fi